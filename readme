.
├─build              # 调用Makefile(make build)编译后生成该目录（外部调用库） 包含子项目include bin lib文件夹
├─SDK                # SDK源码
└─Makefile           # 编译SDK {build:构建sdk库build，clean:清除构建过程生成的文件}


### 模块编写规则（可参考cm_log） ###
SDK则作为模块的根目录，下级包含各个子模块程序的接口及实现
单个模块则包含service（可选）、 src (module的接口及实现）以及Makefile编译脚本
例如：cm_demo (作为模块程序的实例)
.
├─service            # cm_demo的模块服务 (属于可选范畴)
|   ├─ bin           # cm_demo服务端的可执行程序 （命名规则为 [module]_srv）
│   └─ *             # cm_demo的服务端程序，通过调用cm_demo的接口，加上服务处理逻辑的控制程序。 （最后需要被编译成可执行程序）
├─src                # cm_demo模块， 模块属于被调用范畴
│   ├─include        # cm_demo模块的接口 
│   └─ *             # cm_demo模块的接口实现、其它、及编译后的静态库文件 
├─test
│   └─ *             # 接口的单元测试 (test属于自测的小模块，但Makefile中必须包含clean方法)
├─Makefile           # cm_demo模块的编译，包含 compile：编译cm_demo模块及模块服务的代码， clean：清除cm_demo一切编译文件
└─Readme             # cm_demo模块的一般性注释
注：
1. 头文件中函数声明带有简短注释，函数定义必须具有详细说明
2. 若在模块A包含模块B，则通过SDK下的相对路径去调用


### SDK编译规则
1. 编译构建 ：执行 make build 进行SDK的编译构建
    >> a. 创建 《SDK构建工程》根目录
    >> b. 进入SDK子目录，执行各工程下Makefile的compile方法
    >> c. 拷贝目标文件到《SDK构建工程》 目录下 （bin：服务端的可执行程序；include：提供的用于外部引用的头文件；lib：静态库）
    
2. 清除：执行make clean 清除构建过程中的文件，回退到构建前状态
    >> a. 删除 《SDK构建工程》 根目录
    >> b. 进入SDK子目录，执行各工程下Makefile的clean方法
    